---

- service_facts:

- name: Users and Groups
  block:
    - name: Add node_exporter group
      group:
        name: "{{ node_exporter.group }}"
        state: present

    - name: Add node_exporter user
      user:
        name: "{{ node_exporter.user }}"
        group: "{{ node_exporter.group }}"
        system: yes
        create_home: no
        home: "/noneexistent"
        shell: /bin/false
        state: present

    - name: Delete home directory
      file:
        name: "/noneexistent"
        state: absent

- name: Directory preparation
  block:
    - name: Add node_exporter directories
      file:
        name: "{{ item }}"
        owner: "{{ node_exporter.user }}"
        group: "{{ node_exporter.group }}"
        mode: 0750
        state: directory
      loop:
        - "{{ node_exporter.logdir }}"

    - name: Create node_exporter binary directory
      file:
        name: "{{ node_exporter.bin_sources }}"
        owner: "root"
        group: "root"
        mode: 0755
        state: directory

    - name: Add node_exporter directories
      file:
        name: "{{ item }}"
        owner: "{{ node_exporter.user }}"
        group: "{{ node_exporter.group }}"
        mode: 0750
        state: directory
      loop:
        - "{{ node_exporter_data }}"
        - "{{ node_exporter_data }}/config"

- name: Install additional packages and prepare directory
  block:
    - name: Add node_exporter directories
      file:
        name: "{{ item }}"
        owner: "{{ node_exporter.user }}"
        group: "{{ node_exporter.group }}"
        mode: 0750
        state: directory
      loop:
        - "{{ node_exporter_data }}/text_collector"

    - name: install the latest packages for smartd
      import_role:
        name: os/package
      vars:
        package_action: "install"
        package_list:
          - "smartmontools-{{ node_exporter.smartmon_version }}*"

    - name: Restart smartd service
      systemd:
        name: "{{ node_exporter.smartd_service }}"
        daemon_reload: yes
        state: restarted
        enabled: yes
  when: is_baremetal

- name: Firewalld
  block:
    - name: configure. open port "{{node_exporter.port}}/{{node_exporter.protocol}}" for node_exporter.service
      firewalld:
        port: "{{ node_exporter.port }}/{{ node_exporter.protocol }}"
        permanent: yes
        immediate: no
        state: enabled

    - name: configure. open port http for node_exporter.service
      firewalld:
        service: http
        permanent: yes
        immediate: no
        state: enabled

    - name: Reload firewalld
      shell: firewall-cmd --reload
  when: "'firewalld.service' in ansible_facts.services"
  ignore_errors: true
